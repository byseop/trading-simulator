{"version":3,"sources":["context/ExchangeContext.js","components/CoinSummary.js","components/OrderbookList.js","components/Orderbook.js","components/TradeForm.js","components/Trade.js","components/Order.js","components/OrderContainer.js","components/CoinDetail.js","components/Coin.js","components/CoinList.js","components/HoldCoin.js","components/HoldCoinList.js","components/CoinListContainer.js","components/TradingSimulator.js","pages/Exchange.js","App.js","serviceWorker.js","index.js"],"names":["initialState","market","isLoad","data","error","realtimeData","loadingState","success","saveRealtimeData","map","list","code","includes","filter","concat","ExchangeReducer","state","action","type","Error","ExchangeStateContext","createContext","ExchangeDispatchContext","ExchangeProvider","children","useReducer","dispatch","Provider","value","useExchangeState","useContext","a","axios","get","response","marketList","ws","WebSocket","onopen","send","JSON","stringify","onmessage","e","Response","text","parse","onerror","summaryState","name","summaryReducer","summaryStateContext","summaryDispatchContext","SummaryProvider","useSummaryDispatch","userData","cash","coin","fnAsk","askCoin","length","totalPrice","volume","fnBid","bidCoin","holdingCoin","alert","reduce","acc","cur","push","userReducer","userStateContext","userDispatchContext","UserProvider","useUserState","useUserDispatch","orderbook","OrderbookReducer","OrderbookStateContext","OrderbookDispatchContext","OrderbookProvider","getOrderbook","wsopen","marketCode","wsclose","close","React","memo","exchangeState","useCallback","korean_name","getData","changeLiteral","change","fixPrice","price","parseInt","toFixed","toLocaleString","trade_price","change_rate","change_price","high_price","low_price","acc_trade_price_24h","acc_trade_volume_24h","className","style","backgroundImage","split","ask_price","bid_price","ask_size","bid_size","setOrderbookData","splitCode","fixLevel","onClick","useOrderbookState","orderbook_units","reverse","key","orderbookData","typeToStr","useState","inputPrice","setInputPrice","inputVolume","setInputVolume","useEffect","setTotalPrice","fnCodeStr","userState","userDispatch","trade","fullcode","askAlert","options","numeral","numeralThousandsGroupStyle","onChange","Number","target","rawValue","readOnly","backgroundColor","Trade","setType","Order","OrderContainer","useOrderbookDispatch","CoinDetail","useSummaryState","selectCoin","markets","sortedData","sort","b","HoldCoin","realtimePrice","average","parseFloat","earnReturn","est","HoldCoinList","marketState","CoinListContainer","TradingSimulaor","useExchangeDispatch","getMarket","Exchange","path","exact","component","TradingSimulator","App","Boolean","window","location","hostname","match","ReactDOM","render","basename","process","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.73672b38.chunk.js","sourcesContent":["import React, { createContext, useReducer, useContext } from 'react';\nimport axios from 'axios';\n\n/// 실시간 정보\n// StockExchange 에서 사용 할 기본상태\nconst initialState = {\n  market: {\n    isLoad: false,\n    data: null,\n    error: null,\n  },\n  realtimeData: {\n    isLoad: false,\n    data: null,\n    error: null,\n  },\n};\n\n// 로딩중 상태\nconst loadingState = {\n  isLoad: true,\n  data: null,\n  error: null,\n};\n\n// 성공시 상태\nconst success = data => ({\n  isLoad: false,\n  data,\n  error: null,\n});\n\n// 실패시 상태\nconst error = error => ({\n  isLoad: false,\n  data: null,\n  error: error,\n});\n\n// 실시간 정보 저장\nconst saveRealtimeData = (realtimeData, data) => ({\n  isLoad: false,\n  data: (function() {\n    // console.log(realtimeData.data)\n    if (realtimeData.data) {\n      if (!realtimeData.data.map(list => list.code).includes(data.code)) {\n        return realtimeData.data.concat(data);\n      } else {\n        return realtimeData.data\n          .filter(list => list.code !== data.code)\n          .concat(data);\n      }\n    } else {\n      const tempArr = [];\n      realtimeData.data = tempArr.concat(data);\n      return realtimeData.data;\n    }\n  })(),\n  error: null,\n});\n\n// 리듀서\nfunction ExchangeReducer(state, action) {\n  switch (action.type) {\n    case 'GET_MARKET':\n      return {\n        ...state,\n        market: loadingState,\n      };\n    case 'GET_MARKET_SUCCESS':\n      return {\n        ...state,\n        market: success(action.data),\n      };\n    case 'GET_MARKET_ERROR':\n      return {\n        ...state,\n        market: error(action.error),\n      };\n    case 'GET_REALTIME_DATA':\n      return {\n        ...state,\n        realtimeData: loadingState,\n      };\n    case 'GET_REALTIME_DATA_SUCCESS':\n      return {\n        ...state,\n        realtimeData: saveRealtimeData(state.realtimeData, action.data),\n      };\n    case 'GET_REALTIME_DATA_ERROR':\n      return {\n        ...state,\n        realtimeData: error(action.error),\n      };\n    default:\n      throw new Error(`Unhandled action type ${action.type}`);\n  }\n}\n\n// 컨텍스트 분리\nconst ExchangeStateContext = createContext(null);\nconst ExchangeDispatchContext = createContext(null);\n// 위에서 선언한 두가지 컨텍스트를 Provider로 감싸준다.\nexport function ExchangeProvider({ children }) {\n  const [state, dispatch] = useReducer(ExchangeReducer, initialState);\n  return (\n    <ExchangeStateContext.Provider value={state}>\n      <ExchangeDispatchContext.Provider value={dispatch}>\n        {children}\n      </ExchangeDispatchContext.Provider>\n    </ExchangeStateContext.Provider>\n  );\n}\n\n// Hook: 조회를 쉽게\nexport function useExchangeState() {\n  const state = useContext(ExchangeStateContext);\n  if (!state) {\n    throw new Error('Cannot find Stock Provider');\n  }\n  return state;\n}\n\nexport function useExchangeDispatch() {\n  const dispatch = useContext(ExchangeDispatchContext);\n  if (!dispatch) {\n    throw new Error('Cannot find Stock Provider');\n  }\n  return dispatch;\n}\n\n// 실시간 시세 조회 함수\nexport async function getMarket(dispatch) {\n  dispatch({\n    // 마켓 가져오기 시작\n    type: 'GET_MARKET',\n  });\n  try {\n    // 마켓 가져오기 중\n    const response = await axios.get('https://api.upbit.com/v1/market/all');\n    dispatch({\n      type: 'GET_MARKET_SUCCESS',\n      data: response.data,\n    });\n\n    // 마켓 리스트를 추출하여 웹소켓 실행\n    const marketList = response.data\n      .filter(list => list.market.includes('KRW-'))\n      .map(list => list.market);\n    const ws = new WebSocket('wss://api.upbit.com/websocket/v1');\n    ws.onopen = () => {\n      // 웹소켓 연결\n      dispatch({\n        type: 'GET_REALTIME_DATA',\n      });\n      ws.send(\n        `[{\"ticket\":\"test\"},{\"type\":\"ticker\",\"codes\": ${JSON.stringify(\n          marketList,\n        )}}]`,\n      );\n    };\n    ws.onmessage = async e => {\n      // 실시간 데이터 수신\n      const { data } = e;\n      const text = await new Response(data).text();\n      // console.log(JSON.parse(text));\n      dispatch({\n        type: 'GET_REALTIME_DATA_SUCCESS',\n        data: JSON.parse(text),\n      });\n    };\n    ws.onerror = e => {\n      // 실시간 데이터 수신 에러\n      dispatch({\n        type: 'GET_REALTIME_DATA_ERROR',\n        error: e,\n      });\n    };\n  } catch (e) {\n    // 마켓 가져오기 실패\n    dispatch({\n      type: 'GET_MARKET_ERROR',\n      error: e,\n    });\n  }\n}\n\n/// 요약정보\nconst summaryState = {\n  code: null,\n  name: null,\n};\n\nfunction summaryReducer(state, action) {\n  switch (action.type) {\n    case 'SELECT_COIN':\n      return {\n        code: action.code,\n        name: action.name,\n      };\n    default:\n      throw new Error(`Unhandled action type ${action.type}`);\n  }\n}\n\n// 선택 된 코인 컨텍스트\nconst summaryStateContext = createContext(null);\nconst summaryDispatchContext = createContext(null);\nexport function SummaryProvider({ children }) {\n  const [state, dispatch] = useReducer(summaryReducer, summaryState);\n  return (\n    <summaryStateContext.Provider value={state}>\n      <summaryDispatchContext.Provider value={dispatch}>\n        {children}\n      </summaryDispatchContext.Provider>\n    </summaryStateContext.Provider>\n  );\n}\n\nexport function useSummaryState() {\n  const state = useContext(summaryStateContext);\n  if (!state) {\n    throw new Error('Cannot find Summary Provider');\n  }\n  return state;\n}\n\nexport function useSummaryDispatch() {\n  const dispatch = useContext(summaryDispatchContext);\n  if (!dispatch) {\n    throw new Error('Cannot find Summary Provider');\n  }\n  return dispatch;\n}\n\n/// 유저 정보\n// 유저 기본정보\nconst userData = {\n  cash: null,\n  coin: null,\n};\n\n// fn ASK\nconst fnAsk = (coin, askCoin) => {\n  if (!coin) {\n    return [askCoin];\n  } else {\n    const exist = coin.filter(list => list.code === askCoin.code);\n    if (exist.length) {\n      return coin.map(list => {\n        if (list.code === askCoin.code) {\n          list.totalPrice += askCoin.totalPrice;\n          list.volume += askCoin.volume;\n          return list;\n        } else {\n          return list;\n        }\n      });\n    } else {\n      return coin.concat(askCoin);\n    }\n  }\n};\n\n// fn BID\nconst fnBid = (state, bidCoin) => {\n  const holdingCoin =\n    state.coin && state.coin.filter(list => list.code === bidCoin.code)[0];\n\n  if (holdingCoin) {\n    if (holdingCoin.volume < bidCoin.volume) {\n      // 보유중인 코인의 수량보다 판매요청한 수량이 많을 때\n      alert(`보유중인 ${bidCoin.code}이(가) 요청 수량보다 적습니다.`);\n      return {\n        cash: state.cash,\n        coin: state.coin,\n      };\n    } else {\n      return {\n        cash: (state.cash += bidCoin.totalPrice),\n        coin: state.coin.reduce((acc, cur) => {\n          if (cur.code === bidCoin.code) {\n            if (cur.volume !== bidCoin.volume) {\n              cur.volume -= bidCoin.volume;\n              cur.totalPrice -= bidCoin.totalPrice;\n              acc.push(cur);\n            }\n          } else {\n            acc.push(cur);\n          }\n          return acc;\n        }, []),\n      };\n    }\n  } else {\n    alert(`보유중인 ${bidCoin.code}이(가) 없습니다.`);\n    return {\n      cash: state.cash,\n      coin: null,\n    };\n  }\n};\n\n// 유저 리듀서\nfunction userReducer(state, action) {\n  switch (action.type) {\n    case 'USER_REGISTER':\n      return {\n        ...state,\n        cash: action.data.cash,\n      };\n    case 'TRADE_ASK':\n      if (state.cash < action.data.coin.totalPrice) {\n        alert('보유 현금이 부족합니다.');\n        return { ...state };\n      } else {\n        return {\n          ...state,\n          cash: state.cash - action.data.coin.totalPrice,\n          coin: fnAsk(state.coin, action.data.coin),\n        };\n      }\n    case 'TRADE_BID':\n      return fnBid(state, action.data.coin);\n    default:\n      throw new Error(`Unhandled action type ${action.type}`);\n  }\n}\n\n// 유저 컨텍스트\nconst userStateContext = createContext(null);\nconst userDispatchContext = createContext(null);\nexport function UserProvider({ children }) {\n  const [state, dispatch] = useReducer(userReducer, userData);\n  return (\n    <userStateContext.Provider value={state}>\n      <userDispatchContext.Provider value={dispatch}>\n        {children}\n      </userDispatchContext.Provider>\n    </userStateContext.Provider>\n  );\n}\n\n// Hook: 유저 컨텍스트\nexport function useUserState() {\n  const state = useContext(userStateContext);\n  if (!state) {\n    throw new Error('Cannot find User Provider');\n  }\n  return state;\n}\n\nexport function useUserDispatch() {\n  const dispatch = useContext(userDispatchContext);\n  if (!dispatch) {\n    throw new Error('Cannot find User Provider');\n  }\n  return dispatch;\n}\n\n// 실시간 호가 데이터\nconst orderbook = {\n  isLoad: null,\n  data: null,\n  error: null,\n};\n\n// 실시간 호가 리듀서\nfunction OrderbookReducer(state, action) {\n  switch (action.type) {\n    case 'GET_ORDERBOOK':\n      return loadingState;\n    case 'GET_ORDERBOOK_SUCCESS':\n      return success(action.data);\n    case 'GET_ORDERBOOK_ERROR':\n      return error(action.error);\n    case 'CLOSE_ORDERBOOK':\n      return {\n        isLoad: null,\n        data: null,\n        error: null,\n      };\n    default:\n      throw new Error(`Unhandled action type ${action.type}`);\n  }\n}\n\n// 실시간 호가 컨텍스트\nconst OrderbookStateContext = createContext(null);\nconst OrderbookDispatchContext = createContext(null);\n\nexport function OrderbookProvider({ children }) {\n  const [state, dispatch] = useReducer(OrderbookReducer, orderbook);\n  return (\n    <OrderbookStateContext.Provider value={state}>\n      <OrderbookDispatchContext.Provider value={dispatch}>\n        {children}\n      </OrderbookDispatchContext.Provider>\n    </OrderbookStateContext.Provider>\n  );\n}\n\n// Hook\nexport function useOrderbookState() {\n  const state = useContext(OrderbookStateContext);\n  if (!state) {\n    throw new Error(`Cannot find Orderbook Provider`);\n  }\n  return state;\n}\n\nexport function useOrderbookDispatch() {\n  const dispatch = useContext(OrderbookDispatchContext);\n  if (!dispatch) {\n    throw new Error(`Cannot find Orderbook Provider`);\n  }\n  return dispatch;\n}\n\n// 실시간 호가 조회 함수\nconst getOrderbook = (function() {\n  let ws;\n  return {\n    wsopen: (dispatch, code) => {\n      try {\n        // 변경 된 마켓코드 설정\n        const marketCode = code;\n\n        // 웹소켓 생성\n        ws = new WebSocket('wss://api.upbit.com/websocket/v1');\n        ws.onopen = () => {\n          dispatch({\n            type: 'GET_ORDERBOOK',\n          });\n          ws.send(\n            `[{\"ticket\":\"UNIQUE_TICKET\"},{\"type\":\"orderbook\",\"codes\":[\"${marketCode}\"]}]`,\n          );\n        };\n\n        // 실시간 호가 수신\n        ws.onmessage = async e => {\n          const { data } = e;\n          const text = await new Response(data).text();\n\n          dispatch({\n            type: 'GET_ORDERBOOK_SUCCESS',\n            data: JSON.parse(text),\n          });\n        };\n\n        // 실시간 호가 수신 에러\n        ws.onerror = e => {\n          dispatch({\n            type: 'GET_ORDERBOOK_ERROR',\n            error: e,\n          });\n        };\n      } catch (e) {\n        throw new Error(`Error -> ${e}`);\n      }\n    },\n    wsclose: dispatch => {\n      if (ws !== null) {\n        dispatch({\n          type: 'CLOSE_ORDERBOOK',\n        });\n        ws.close();\n      }\n    },\n  };\n})();\nexport { getOrderbook };\n","import React, { useCallback } from 'react';\nimport '../css/CoinSummary.css';\nimport {\n  useSummaryDispatch,\n  useExchangeState,\n} from '../context/ExchangeContext';\n\nconst CoinSummary = ({ code, name }) => {\n  const dispatch = useSummaryDispatch();\n  const exchangeState = useExchangeState();\n  const { market } = exchangeState;\n  const { data: realtimeData } = exchangeState.realtimeData;\n\n  const getData = useCallback(() => {\n    // 선택된 데이터를 추출하는 함수\n    if (code) {\n      return realtimeData.filter(list => list.code === code)[0];\n    } else {\n      return (\n        market &&\n        realtimeData &&\n        dispatch({\n          type: 'SELECT_COIN',\n          code: market.data[0].market,\n          name: market.data[0].korean_name,\n        })\n      );\n    }\n  }, [code, dispatch, market, realtimeData]);\n  const data = getData();\n\n  // console.log('rendered')\n\n  const changeLiteral = useCallback(change => {\n    // 가격변동 +, - 함수\n    if (change === 'RISE') {\n      return '+';\n    } else if (change === 'FALL') {\n      return '-';\n    }\n    return '';\n  }, []);\n\n  const fixPrice = useCallback(price => {\n    // 가격 단위 조정 함수\n    return parseInt(price.toFixed(0)).toLocaleString();\n  }, []);\n\n  if (data) {\n    const {\n      code,\n      change,\n      trade_price,\n      change_rate,\n      change_price,\n      high_price,\n      low_price,\n      acc_trade_price_24h,\n      acc_trade_volume_24h,\n    } = data;\n\n    return (\n      <div className=\"Coin__Summary\">\n        <div className=\"Selected\">\n          <div className=\"Name\">\n            <h3\n              style={{\n                backgroundImage: `url(https://static.upbit.com/logos/${\n                  code.split('-')[1]\n                }.png)`,\n              }}\n            >\n              {name}\n              <span>{code}</span>\n            </h3>\n          </div>\n          <div className=\"Info\">\n            <div className={`Price ${change}`}>\n              <h4>\n                {trade_price.toLocaleString()}\n                <span>{code.split('-')[0]}</span>\n              </h4>\n              <div className=\"Change\">\n                <p>\n                  전일대비:{' '}\n                  <span>\n                    {changeLiteral(change)}\n                    {(change_rate * 100).toFixed(2)}%\n                  </span>\n                  <span>\n                    {changeLiteral(change)}\n                    {change_price.toLocaleString()}\n                    <em>{code.split('-')[0]}</em>\n                  </span>\n                </p>\n              </div>\n            </div>\n            <div className=\"Others\">\n              <div className=\"High__Low\">\n                <p>\n                  고가\n                  <span>\n                    {fixPrice(high_price)}\n                    <em>{code.split('-')[0]}</em>\n                  </span>\n                </p>\n                <p>\n                  저가\n                  <span>\n                    {fixPrice(low_price)}\n                    <em>{code.split('-')[0]}</em>\n                  </span>\n                </p>\n              </div>\n              <div className=\"Volume\">\n                <p>\n                  거래량(24H)\n                  <span>\n                    {fixPrice(acc_trade_volume_24h)}\n                    <em>{code.split('-')[1]}</em>\n                  </span>\n                </p>\n                <p>\n                  거래대금(24H)\n                  <span>\n                    {fixPrice(acc_trade_price_24h)}\n                    <em>{code.split('-')[0]}</em>\n                  </span>\n                </p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n  return <div className=\"Select__Coin__Loading\">로딩중...</div>;\n};\n\nexport default React.memo(CoinSummary);\n","import React, { useCallback } from 'react';\n\nconst OrderbookList = ({\n  ask_price,\n  bid_price,\n  ask_size,\n  bid_size,\n  code,\n  setOrderbookData,\n}) => {\n  const splitCode = code.split('-');\n  const fixPrice = useCallback((price, fixLevel) => {\n    // 가격 단위 조정 함수\n    if (price > 999) {\n      return parseInt(price.toFixed(fixLevel)).toLocaleString();\n    }\n    return price.toFixed(fixLevel);\n  }, []);\n\n  return (\n    <div\n      className=\"Orderbook__List\"\n      onClick={() => setOrderbookData({ ask_price, bid_price })}\n    >\n      <div className=\"Orderbook__Size\">\n        {ask_size ? (\n          <p>\n            {fixPrice(ask_size, 4)} <span>{splitCode[1]}</span>\n          </p>\n        ) : null}\n      </div>\n      <div className=\"Orderbook__Price\">\n        {ask_price ? (\n          <p>\n            {ask_price.toLocaleString()} <span>{splitCode[0]}</span>\n          </p>\n        ) : null}\n        {bid_price ? (\n          <p>\n            {bid_price.toLocaleString()} <span>{splitCode[0]}</span>\n          </p>\n        ) : null}\n      </div>\n      <div className=\"Orderbook__Size\">\n        {bid_size ? (\n          <p>\n            {fixPrice(bid_size, 4)} <span>{splitCode[1]}</span>\n          </p>\n        ) : null}\n      </div>\n    </div>\n  );\n};\n\nexport default React.memo(OrderbookList);\n","import React from 'react';\nimport { useOrderbookState } from '../context/ExchangeContext';\nimport OrderbookList from './OrderbookList';\nimport '../css/Orderbook.css';\n\nconst Orderbook = ({ setOrderbookData, code }) => {\n  const state = useOrderbookState();\n  const { data } = state;\n  const orderbook_units = data !== null && data.orderbook_units;\n  if (orderbook_units) {\n    return (\n      <div className=\"Orderbook__Wrap\">\n        <div className=\"Orderbook__Head\">\n          <div className=\"Orderbook__Div\">\n            <p>매수량</p>\n          </div>\n          <div className=\"Orderbook__Div\">\n            <p>가격</p>\n          </div>\n          <div className=\"Orderbook__Div\">\n            <p>매도량</p>\n          </div>\n        </div>\n        <div className=\"Orderbook\">\n          {orderbook_units.reverse().map(list => (\n            <OrderbookList\n              ask_price={list.ask_price}\n              ask_size={list.ask_size}\n              key={list.ask_price}\n              code={code}\n              setOrderbookData={setOrderbookData}\n            />\n          ))}\n          {orderbook_units.reverse().map(list => (\n            <OrderbookList\n              bid_price={list.ask_price}\n              bid_size={list.bid_size}\n              key={list.bid_price}\n              code={code}\n              setOrderbookData={setOrderbookData}\n            />\n          ))}\n        </div>\n      </div>\n    );\n  }\n  return <div className=\"Orderbook__Wrap\">로딩중...</div>;\n};\n\nexport default React.memo(Orderbook);\n","import React, { useCallback, useEffect, useState } from 'react';\nimport Cleave from 'cleave.js/react';\nimport { useUserState, useUserDispatch } from '../context/ExchangeContext';\n\nconst TradeForm = ({ type, orderbookData, code }) => {\n  const typeToStr = useCallback(() => {\n    if (type === 'ASK') {\n      return '매수';\n    } else if (type === 'BID') {\n      return '매도';\n    }\n  }, [type]);\n\n  const [inputPrice, setInputPrice] = useState(0); // 매수가격\n  const [inputVolume, setInputVolume] = useState(0); // 매수수량\n\n  useEffect(() => {\n    // 왼쪽 호가창에서 가격 선택시 매수가격 수정\n    const price = orderbookData.ask_price || orderbookData.bid_price || 0;\n    setInputPrice(price);\n  }, [orderbookData]);\n\n  const [totalPrice, setTotalPrice] = useState(0);\n  useEffect(() => {\n    setTotalPrice(inputPrice * inputVolume);\n  }, [inputPrice, inputVolume]);\n\n  const fnCodeStr = useCallback(\n    type => {\n      if (code) {\n        return code.split('-')[type];\n      }\n    },\n    [code],\n  );\n\n  const userState = useUserState();\n  const userDispatch = useUserDispatch();\n\n  const { cash } = userState;\n  // console.log(userState);\n  const trade = useCallback(() => {\n    if (type === 'ASK') {\n      userDispatch({\n        type: 'TRADE_ASK',\n        data: {\n          coin: {\n            totalPrice: totalPrice,\n            code: fnCodeStr(1),\n            fullcode: code,\n            volume: inputVolume,\n          },\n        },\n      });\n    } else if (type === 'BID') {\n      userDispatch({\n        type: 'TRADE_BID',\n        data: {\n          coin: {\n            totalPrice: totalPrice,\n            code: fnCodeStr(1),\n            fullcode: code,\n            volume: inputVolume,\n          },\n        },\n      });\n    } else throw new Error(`Unhandled trade type ${type}`);\n    setInputPrice(0);\n    setInputVolume(0);\n  }, [userDispatch, type, totalPrice, inputVolume, fnCodeStr, code]);\n\n  const askAlert = useCallback(() => {\n    alert('왼쪽 호가창에서 가격을 선택해주세요.');\n  }, []);\n\n  return (\n    <div className=\"Trade__Form\">\n      <div className=\"Form__List\">\n        <div className=\"Form__Title\">\n          <p>보유 원화</p>\n        </div>\n        <div className=\"Form__Des\">\n          <p>\n            {cash && cash.toLocaleString()}\n            <span>{fnCodeStr(0)}</span>\n          </p>\n        </div>\n      </div>\n      <div className=\"Form__List\">\n        <div className=\"Form__Title\">\n          <p>{typeToStr()} 가격</p>\n        </div>\n        <div className=\"Form__Des\">\n          <Cleave\n            options={{\n              numeral: true,\n              numeralThousandsGroupStyle: 'thousand',\n            }}\n            value={inputPrice}\n            onChange={e => setInputPrice(Number(e.target.rawValue))}\n            readOnly\n            onClick={askAlert}\n          />\n          <label>{fnCodeStr(0)}</label>\n        </div>\n      </div>\n      <div className=\"Form__List\">\n        <div className=\"Form__Title\">\n          <p>{typeToStr()} 수량</p>\n        </div>\n        <div className=\"Form__Des\">\n          <Cleave\n            options={{\n              numeral: true,\n              numeralThousandsGroupStyle: 'thousand',\n            }}\n            value={inputVolume}\n            onChange={e => setInputVolume(Number(e.target.rawValue))}\n          />\n          <label>{fnCodeStr(1)}</label>\n        </div>\n      </div>\n      <div className=\"Form__List\">\n        <div className=\"Form__Title\">\n          <p>{typeToStr()} 총액</p>\n        </div>\n        <div className=\"Form__Des\">\n          <p>\n            {totalPrice.toLocaleString()}\n            <span>{fnCodeStr(0)}</span>\n          </p>\n        </div>\n      </div>\n      <div className=\"Form__Submit\">\n        <button\n          type=\"submit\"\n          style={{ backgroundColor: type === 'ASK' ? '#f14f4f' : '#7878e3' }}\n          onClick={trade}\n        >\n          {typeToStr()}\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default React.memo(TradeForm);\n","import React, { useState } from 'react';\nimport '../css/Trade.css';\nimport TradeForm from './TradeForm';\n\nconst Trade = ({ orderbookData, code }) => {\n  const [type, setType] = useState('ASK'); // 'ASK: 매도' <-> 'BID: 매도'\n\n  return (\n    <div className=\"Trade__Box\">\n      <div className=\"Trade__Head\">\n        <div className=\"Trade__Method\">\n          <p\n            className={type === 'ASK' ? 'on' : null}\n            onClick={() => setType('ASK')}\n          >\n            매수\n          </p>\n        </div>\n        <div className=\"Trade__Method\">\n          <p\n            className={type === 'BID' ? 'on' : null}\n            onClick={() => setType('BID')}\n          >\n            매도\n          </p>\n        </div>\n      </div>\n      <TradeForm type={type} orderbookData={orderbookData} code={code} />\n    </div>\n  );\n};\n\nexport default Trade;\n","import React, { useState } from 'react';\nimport Orderbook from './Orderbook';\nimport Trade from './Trade';\nimport '../css/Order.css';\n\nconst Order = ({ code }) => {\n  const [orderbookData, setOrderbookData] = useState(0);\n\n  return (\n    <>\n      <div className=\"Order__Box Section\">\n        <div className=\"Order__Inner\">\n          <Orderbook setOrderbookData={setOrderbookData} code={code} />\n          <Trade orderbookData={orderbookData} code={code} />\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default Order;\n","import React, { useEffect } from 'react';\nimport Order from './Order';\nimport { useOrderbookDispatch, getOrderbook } from '../context/ExchangeContext';\n\nconst OrderContainer = ({ code }) => {\n  const dispatch = useOrderbookDispatch();\n  useEffect(() => {\n    getOrderbook.wsopen(dispatch, code);\n    return () => {\n      getOrderbook.wsclose(dispatch);\n    };\n  }, [code, dispatch]);\n\n  return <Order code={code} />;\n};\n\nexport default OrderContainer;\n","import React from 'react';\nimport '../css/CoinDetail.css';\nimport { useSummaryState } from '../context/ExchangeContext';\nimport CoinSummary from './CoinSummary';\nimport OrderContainer from './OrderContainer';\n\nconst CoinDetail = () => {\n  const state = useSummaryState();\n  const { code, name } = state;\n  return (\n    <div className=\"Coin__Detail\">\n      <CoinSummary code={code} name={name} />\n      <OrderContainer code={code} />\n    </div>\n  );\n};\n\nexport default CoinDetail;\n","import React, { useCallback } from 'react';\nimport { useSummaryDispatch } from '../context/ExchangeContext';\nimport '../css/Coin.css';\n\nconst Coin = ({ data, name }) => {\n  const dispatch = useSummaryDispatch();\n  const selectCoin = useCallback(() => {\n    dispatch({\n      type: 'SELECT_COIN',\n      code: data.code,\n      name\n    });\n  }, [data.code, dispatch, name]);\n\n  // console.log('rendered coin');\n  const {\n    code,\n    trade_price,\n    change_rate,\n    acc_trade_price_24h,\n    change,\n    change_price,\n  } = data;\n\n  const changeLiteral = useCallback(change => {\n    if (change === 'RISE') {\n      return '+';\n    } else if (change === 'FALL') {\n      return '-';\n    }\n    return '';\n  }, []);\n\n  const fixPrice = useCallback(price => {\n    // 가격 단위 조정 함수\n    return parseInt(price.toFixed(0)).toLocaleString();\n  }, []);\n\n  return (\n    <div className=\"Coin\" onClick={selectCoin}>\n      <div className=\"Coin__Name\">\n        <p>{name}</p>\n        <span>{code}</span>\n      </div>\n      <div className={`Coin__Price ${change}`}>\n        <p>{trade_price.toLocaleString()}</p>\n      </div>\n      <div className={`Coin__Change__Price ${change}`}>\n        <p>{`${changeLiteral(change)} ${(change_rate * 100).toFixed(2)}%`}</p>\n        <span>{`${changeLiteral(\n          change,\n        )} ${fixPrice(change_price)}`}</span>\n      </div>\n      <div className=\"Coin__Volume\">\n        <p>\n          {parseInt(\n            (acc_trade_price_24h * 0.000001).toFixed(0),\n          ).toLocaleString()}\n          백만\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default React.memo(Coin);\n","import React, { useCallback } from 'react';\nimport '../css/CoinList.css';\nimport { useExchangeState } from '../context/ExchangeContext';\nimport Coin from '../components/Coin';\n\nconst CoinList = () => {\n  const state = useExchangeState();\n  const { data: markets } = state.market;\n  const { data: realtimeData } = state.realtimeData;\n\n  // 거래량 순으로 정렬하기\n  const sortedData = useCallback(() => {\n    return (\n      realtimeData &&\n      realtimeData.sort((a, b) => b.acc_trade_price_24h - a.acc_trade_price_24h)\n    );\n  }, [realtimeData]);\n\n  // console.log('[CoinList.js] -> rendered');\n\n  return (\n    <div className=\"Coin__List\">\n      <div className=\"List__Head\">\n        <div className=\"Coin__Name\">\n          <span>한글명</span>\n        </div>\n        <div className=\"Coin__Price\">\n          <span>현재가</span>\n        </div>\n        <div className=\"Coin__Change__Price\">\n          <span>전일대비</span>\n        </div>\n        <div className=\"Coin__Volume\">\n          <span>거래대금</span>\n        </div>\n      </div>\n      <div className=\"Coins\">\n        {sortedData() &&\n          sortedData().map(data => (\n            <Coin\n              key={data.code}\n              data={data}\n              name={\n                markets.filter(list => list.market === data.code)[0].korean_name\n              }\n            />\n          ))}\n      </div>\n    </div>\n  );\n};\n\nexport default React.memo(CoinList);\n","import React, { useCallback } from 'react';\nimport '../css/Coin.css';\nimport { useSummaryDispatch } from '../context/ExchangeContext';\n\nconst HoldCoin = ({ data, name, realtimePrice }) => {\n  const { fullcode, totalPrice, volume } = data;\n  const average = parseFloat((totalPrice / data.volume).toFixed(2));\n  const earnReturn = ((realtimePrice - average) / realtimePrice) * 100;\n  const est = volume * realtimePrice;\n\n  const dispatch = useSummaryDispatch();\n  const selectCoin = useCallback(() => {\n    dispatch({\n      type: 'SELECT_COIN',\n      code: fullcode,\n      name,\n    });\n  }, [dispatch, fullcode, name]);\n  return (\n    <div className=\"Hold__Coin Coin\" onClick={selectCoin}>\n      <div className=\"Coin__Name\">\n        <p>{name}</p>\n        <span>{fullcode}</span>\n      </div>\n      <div\n        className={`Coin__Price ${\n          realtimePrice === average\n            ? ''\n            : realtimePrice > average\n            ? 'RISE'\n            : 'FALL'\n        }`}\n      >\n        <p>\n          {est.toLocaleString()}\n          <span>\n            {volume.toLocaleString()}&nbsp;\n            {fullcode.split('-')[1]}\n          </span>\n        </p>\n      </div>\n      <div\n        className={`Coin__Change__Price ${\n          earnReturn === 0 ? '' : earnReturn > 0 ? 'RISE' : 'FALL'\n        }`}\n      >\n        <p>{earnReturn.toFixed(2)}%</p>\n      </div>\n      <div className=\"Coin__Average\">\n        <p>\n          {totalPrice.toLocaleString()}&nbsp;\n          <span>\n            {average.toLocaleString()} {fullcode.split('-')[0]}\n          </span>\n        </p>\n      </div>\n    </div>\n  );\n};\nexport default HoldCoin;\n","import React from 'react';\nimport '../css/HoldCoinList.css';\nimport { useExchangeState, useUserState } from '../context/ExchangeContext';\nimport HoldCoin from './HoldCoin';\n\nconst HoldCoinList = () => {\n  const marketState = useExchangeState();\n  const { data: markets } = marketState.market;\n\n  const userState = useUserState();\n  // console.log(userState);\n\n  return (\n    <div className=\"Hold__Coin__List\">\n      <div className=\"List__Head\">\n        <div className=\"Coin__Name\">\n          <span>코인명</span>\n        </div>\n        <div className=\"Coin__Price\">\n          <span>평가금/보유량</span>\n        </div>\n        <div className=\"Coin__Change__Price\">\n          <span>수익률</span>\n        </div>\n        <div className=\"Coin__Average\">\n          <span>매수가/평균가</span>\n        </div>\n      </div>\n      <div className=\"Coins\">\n        {!userState.coin ? (\n          <p className=\"not-hold\">보유중인 코인이 없습니다.</p>\n        ) : (\n          userState.coin.map(list => (\n            <HoldCoin\n              data={list}\n              key={list.fullcode}\n              name={\n                markets.filter(market => market.market === list.fullcode)[0]\n                  .korean_name\n              }\n              realtimePrice={\n                marketState.realtimeData.data.filter(\n                  data => data.code === list.fullcode,\n                )[0].trade_price\n              }\n            />\n          ))\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default HoldCoinList;\n","import React, { useState } from 'react';\nimport CoinList from './CoinList';\nimport HoldCoinList from './HoldCoinList';\nimport '../css/CoinListContainer.css';\n\nconst CoinListContainer = () => {\n  const [type, setType] = useState('KRW');\n  return (\n    <div className=\"Coin__List__Container\">\n      <div className=\"Listing__Method\">\n        <div className=\"Method\">\n          <p className={type === 'KRW' ? 'on' : ''} onClick={() => setType('KRW')}>\n            원화거래\n          </p>\n        </div>\n        <div className=\"Method\">\n          <p\n            className={type === 'HOLD_COIN' ? 'on' : ''}\n            onClick={() => setType('HOLD_COIN')}\n          >\n            보유코인\n          </p>\n        </div>\n      </div>\n      {type === 'KRW' ? <CoinList /> : null}\n      {type === 'HOLD_COIN' ? <HoldCoinList /> : null}\n    </div>\n  );\n};\n\nexport default CoinListContainer;\n","import React, { useEffect } from 'react';\nimport {\n  getMarket,\n  useExchangeDispatch,\n  useUserDispatch,\n} from '../context/ExchangeContext';\nimport CoinDetail from './CoinDetail';\nimport CoinListContainer from './CoinListContainer';\nimport '../css/TradingSimulator.css';\n\nfunction TradingSimulaor() {\n  const dispatch = useExchangeDispatch();\n  const userDispatch = useUserDispatch();\n\n  // 처음 거래소 오픈시 유저정보 등록.\n  useEffect(() => {\n    userDispatch({\n      type: 'USER_REGISTER',\n      data: {\n        cash: 100000000,\n        coin: {}\n      },\n    });\n  }, [userDispatch]);\n\n  useEffect(() => {\n    getMarket(dispatch);\n  }, [dispatch]);\n  return (\n    <div className=\"Trading__Simulator\">\n      <CoinDetail />\n      <CoinListContainer />\n    </div>\n  );\n}\n\nexport default TradingSimulaor;\n","import React from 'react';\nimport { Route } from 'react-router-dom';\nimport TradingSimulator from '../components/TradingSimulator';\n\nconst Exchange = () => {\n  return (\n    <div>\n      <Route path=\"/\" exact component={TradingSimulator} />\n    </div>\n  )\n}\n\nexport default Exchange;","import React from 'react';\nimport {\n  ExchangeProvider,\n  SummaryProvider,\n  UserProvider,\n  OrderbookProvider,\n} from './context/ExchangeContext';\nimport Exchange from './pages/Exchange';\n\nfunction App() {\n  return (\n    <ExchangeProvider>\n      <SummaryProvider>\n        <UserProvider>\n          <OrderbookProvider>\n            <Exchange />\n          </OrderbookProvider>\n        </UserProvider>\n      </SummaryProvider>\n    </ExchangeProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <BrowserRouter basename={process.env.PUBLIC_URL}>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}